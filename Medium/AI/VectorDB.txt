Vector DB
19-Feb-2025

Vector Databases: A Beginnerâ€™s Guide!
https://medium.com/data-and-beyond/vector-databases-a-beginners-guide-b050cbbe9ca0

SingleStore
https://portal.singlestore.com/organizations/5afd1dbc-ddec-479c-9132-d7571a0a93b6/homepage


Develop
Data Studio
starter-workplace
db_steven_fa965

CREATE TABLE products (
    id INT PRIMARY KEY,
    name VARCHAR(255),
    description TEXT,
    vector BINARY(8)  -- Adjust size based on the vector's dimension
);


vector: The vector representation of the product  with 128 dimensions.
(e.g., from a text embedding, image embedding, etc.)


SELECT * FROM products;


INSERT INTO products (id, name, description, vector)
VALUES
(1, 'Product A', 'Description of product A', X'01020304'),
(2, 'Product B', 'Description of product B', X'12345678');


CREATE INDEX vector_idx ON products(vector);


SELECT * 
FROM products
WHERE name = 'Product A';



git clone https://github.com/milvus-io/milvus.git
cd milvus/deployments/docker

docker-compose up

Python
pip install pymilvus

from pymilvus import Collection, connections
import numpy as np

# Connect to the Milvus server
connections.connect("default", host="localhost", port="19530")

# Define the collection schema
fields = [
    {"name": "embedding", "type": "FLOAT_VECTOR", "params": {"dim": 128}},
    {"name": "id", "type": "INT64"}
]

# Create the collection
collection = Collection("example_collection", fields)

# Generate random vectors
data = np.random.rand(1000, 128).astype("float32")
ids = [i for i in range(1000)]

# Insert data into the collection
collection.insert([ids, data])

# Perform a search (find the 5 nearest neighbors for a random query vector)
query_vector = np.random.rand(1, 128).astype("float32")
results = collection.search(query_vector, "embedding", param={"nprobe": 10}, limit=5)

print(results)
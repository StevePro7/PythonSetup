Loop-else Clauses and While-else
You don't disassociate the else keyword with optional clauses complimentary to the conditional clause introduced by the if statement, but did you know that else can also be used to associate optional code blocks with loops? That sounds pretty weird, and to be honest, it is an unusual language feature, which is only rarely seen in the wild, and which most definitely deserves some explanation. Now let's look at the while else construct. We'll start out by saying that Guido van Rossum, inventor and benevolent dictator for life of Python has admitted that he would not include this feature if he developed Python again. Back in our world, though, the feature is there, and we need to understand it. Apparently, the original motivation for using the else keyword this way, in conjunction with while loops comes from Donald Knuth in early efforts to rid structured programming language of go to. Although the choice of keyword is at first perplexing, it is possible to rationalize the use of else in this way if your comparison with the if else construct. In the if else structure the code in the if clause is executed if the condition evaluates to true when converted to Bool. In other words, if the condition is truthy. On the other hand, if the condition is falsy the code in the else clause is executed instead. Now look at the while else construct. We can, perhaps, glimpse the logic behind choosing the else keyword. The else clause will be executed when and only when the condition evaluates to false. Of course, the condition may already be false when execution first reaches the while statement, so may it may branch immediately into the else clause or there may be any number of cycles of the while loop before the condition becomes false and execution transfers to the else block. Fair enough, you might say, but isn't this the equivalent of just putting the else code after the loop like this rather than in a special else block? You would be right in this simple case, but if we place a break statement within the loop body it becomes possible to exit the loop without the loop conditional ever becoming false, so now the execute condition is false function call happens even though the condition is not false. To fix this we could use a second test with an if statement after the loop to provide the correct behavior. The drawback with this approach is that the test is duplicated, which violates the Don't Repeat Yourself or DRY guideline, which hampers maintainability. The while else construct in Python allows us to avoid this second redundant test. Now the else block only executes when the main loop condition evaluates to false. If we jump out of the loop another way, such as with the break statement, execution jumps over the else clause. There's no doubt that, however you rationalize it, the choice of keyword here is confusing, and it would have been better all-around if a no break keyword had been used to introduce this block. In lieu of such a keyword, we heartily recommend that if you are tempted to use this obscure and little used language feature that you include just such a nobreak comment, like this.

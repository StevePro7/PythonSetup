For-else Clauses and Handling Search Failure
Now we understand the while else construct, we can look at the analogies for else construct. This may seem even more odd, given the absence of an explicit condition in the for statement, but you just need to remember that the else clause is really the nobreak clause, and in the case of the for loop, that's exactly when it was called. This includes the case when the iterable series over which the loop is iterating is empty. As such, the else clause is useful to handle the not found case when searching for something. The typical pattern of use is like this. We use a for loop to examine each item over an iterable series, and test each item with an if statement. If the item matches we break from the loop. In the event that we fail to find a match, the code in the else block is executed, which handles the No match found case. In the next demo we'll use a for else loop to ensure that a sequence contains at least one integer divisible by a specified value. For example, are any of 2, 5, 9, 37, 28, or 14 divisible by 12? No, so let's append a number that is, 12. Here's a code fragment which ensures that a list of integers contains at least one integer divisible by a specified value. In the event that the supplied list does not contain a multiple of the divisor, the divisor itself is appended to the list to establish the invariant. We set up a list of numeric items and a divisor, which will be 12 in this case. Our for loop iterates through the items, testing each in turn for divisibility by the devisor. If a multiple of the divisor is located the variable it found is set to the current item, and we'll break from the loop, skipping over the loop else clause, and printing the list of items. Should the for loop complete without encountering a multiple of 12, the loop else clause will be entered, which appends the divisor itself to the list, thereby ensuring that the list contains an item divisible by the divisor. For else clauses seem to be much more common than while else clauses, although we must emphasize that neither are common, and both are widely misunderstood, so although we want you to understand them, we can really recommend using them widely unless you assure that everyone who needs to read your code is familiar with their use. In a survey undertaken at PyCon 2011 a majority of those interviewed could not properly understand code which used loop else clauses. Proceed with caution.

Alternatives to Loop-else Clauses
Having pointed out that loop else clauses are best avoided, it's only fair that we provide you with an alternative technique, which we think is better for several reasons, beyond just avoiding an obscure Python construct. Almost any time you see a loop else clause you can refactor by extracting the loop into a named function (Typing), and instead of breaking from the loop simply return directly from the function. The search failure part of the code, which was in the else clause, can then be dedented a level, and just be placed after the loop body. Doing so our new ensure_has_divisible function would look something like this. This is simple enough to be understood by any Python programmer. We can use it like this, passing the items and the divisor, and accepting the dividend as a result. This is easier to understand because it doesn't use any obscure and advanced Python flow control techniques. It's easier to test because it's extracted into a standalone function. It's reusable because it's not mixed in with other code, and we can give it a useful and meaningful name rather than having to put a comment in our code to explain the block. Better all around.

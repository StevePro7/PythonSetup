The bytearray Type
Now let's look at the compliment to the immutable byte sequence, the mutable bytearray sequence. The byte type we just looked at is only one of several so called binary sequence types in Python, whereas bytes is immutable, the bytearray type is mutable. This means it supports many of the same operations as the other mutable sequence type with which you're already deeply familiar, list. The bytearray type supports the same constructors as bytes; Construction of an empty bytearray, construction of a bytearray containing a given number of 0 bytes, construction from another sequence of bytes, such as a bytes object, construction from a Unicode string providing you supply an encoding, and using the fromhex named constructor, a string containing concatenated two-digit hex numbers. As bytearray is mutable, we can, of course, use any of the mutable sequence operations to modify the bytearray in place. Let's create a byte array containing the quick brown fox. We'll extend this sequence using the extend method with jumps over the lazy dog, not forgetting the leading space. As our pangram object is mutable, we can even assign to slices. Let's replace dog with god. The bytearray type effectively supports the same operations as supported by list, together with many of the string like operations supported by bytes, such as upper. We can convert our pangram into upper case. Of course, this uses the notions of upper and lower case, which make sense for ASCII only. We can split our bytearray on white space, which returns a list of bytearray objects, and we can join that list of words back together again, using the join method on bytearray. When using string like operations, such as upper or capitalize on the bytes and bytearray types you must take particular care that only 7-bit ASCII byte strings are in play.

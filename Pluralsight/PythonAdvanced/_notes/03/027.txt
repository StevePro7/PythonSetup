Overriding __delattr__
Now let's look at customizing attribute deletion. Deleting attributes is something that is very rarely seen in Python, although it is possible. Here, using a vector, v, with components p=1 and q=2, our vector class also allows us to remove attributes by calling delattr. We rather mischievously delete the _p attribute using a call to delattr and the _q attribute by using the built-in del statement. This leaves us with a vector with no components. Although a client is unlikely to attempt this inadvertently, we can prevent it by overriding dunder delattr. In a similar manner to our dunder setattr, our dunder delattr simply raises an AttributeError with a message informing the client that the operation is forbidden. Here's how that code behaves when trying to delete either public or private attributes using a vector, v, with components p=9 and q=12. Deleting q using the del statement with v. q causes an AttributeError to be raised.

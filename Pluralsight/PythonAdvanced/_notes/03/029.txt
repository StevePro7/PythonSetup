Direct vs. Indirect Access to __dict__
Do you remember the vars built-in function? Without an argument it returns a dictionary containing the current namespace, and so acts just like the locals built-in function, however, if we supply an argument it returns the dunder dict attribute of its argument, so instead of writing obj. dunder dict we can write vars(obj). Arguably, this is more Pythonic than accessing dunder dict directly, for much the same reason that calling len(collection) is definitely more idiomatic than calling collection. dunder len. That said, the length returned by len is always immutable, whereas dunder dict is a mutable dictionary. In our opinion, it's much clearer that the internal stage of an object is being modified when we directly modify the dunder dict attribute like this by assigning to one of its keys, then when we go via vars. Whichever form you use, and we don't feel strongly either way, you should be aware of this use of vars with an argument.

Attribute Lookup for Special Methods
Some special methods appear to bypass dunder getattribute. Let's look at what's going on. It's important to realize that dunder getattribute only intercepts attribute lookup through the dot operator. Let's create a colored vector called cv and a LoggingProxy for it called cw. If we call the dunder repr method directly on our proxy, cw, the call is routed via the proxy, and is dispatched successfully on the target, returning the repr for ColoredVector. However, if we request the repr of cw in the conventional manner using the built-in function the dunder getattribute function of our logging proxy is not invoked. The call is not forwarded to the ColoredVector, and instead we get the default repr for the LoggingProxy object. This demonstrates that dunder getattribute can only be used to intercept special method calls when the special method is retrieved directly, which is something we don't normally do. Normal access to facilities provided by special methods is through the built-in functions, such as len, iter, and repr, and so on. These all bypass the dunder getattribute mechanism for performance reasons. What this means in practice is that if you want to write a proxy object, such as LoggingProxy, which transparently proxies an object, including its repr or other special methods, it's up to you to provide an implementation of dunder repr that forwards the call appropriately. Here is such a forwarding version of dunder repr. It works by using dunder getattribute on the object base class to retrieve the target object, and then using getattr on the target object to retrieve the dunder repr method, which we then call. This now works when called by the repr function, although our proxy has become fairly invisible at this point, which may hinder debugging.

Where are Methods Stored?
One question you may have is, where are the methods? Why is it that when we introspect the dunder dict of an object we only see attributes and not methods, but as we have just seen with dunder repr, we can retrieve methods using getattr, so where are the methods? The answer is that the methods are attributes of another object, the class object associated with our instance. As we already know, we can get to the class object via the dunder class attribute, and show enough it has a dunder dict attribute, which contains references to the callable objects, which are the manifestations of the methods of our class. Returning briefly to our vector example, we create a vector, v, with Vector components x=3 and y=7. When we retrieve its dunder dict we see _y and _x are private attributes. When we retrieve v. dunder class we see the type of the vector object, Vector. We can in turn retrieve the dunder dict from dunder class. This is an object of type mappingproxy. Of course, we can retrieve the callable object and pass that instance to it taking the place of what is normally the self-argument to a method. It's well worth spending some time experimenting on your own and poking around with these special attributes to get a good sense of how the Python object model hangs together. It's worth noting that the dunder dict attribute of a class object is not a regular dict, but is instead of type mappingproxy, a special mapping type used internally in Python, which does not support item assignment. To add an attribute to a class you must use the setattr function. The machinery of setattr knows how to insert attributes into the class dictionary.

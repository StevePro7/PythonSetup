Implementing a Descriptor
We've seen that property is a descriptor, which wraps three functions. Let's create a more specialized descriptor useful for modeling the strictly positive numeric values in our planet class. Here's a simple descriptor called Positive. The descriptor class implements three methods, which comprise the descriptor protocol; dunder get, dunder set, and dunder delete, which are called when we get a value from a descriptor, set a value through a descriptor, or delete a value through a descriptor respectively. In addition, the positive class implements dunder init to configure new instances of the descriptor. Before we look in more detail at each of these methods let's make use of our new descriptor to refactor our Planet class. We remove the setters and getters for radius_metres and replace the call to the Property constructor with a call to the Positive constructor. We do the same for mass_kilograms, orbital_period_seconds, and surface_temperature_kelvin. With the positive descriptor on hand the Planet class shrinks by a huge amount. At first sight, this may appear confusing. It looks like we're assigning to radius_metres twice, once in the initializer, and once in the body of the class. In fact, the call in the body of the class is binding an instance of a positive descriptor to a class attribute of the Planet. The call in dunder init is then apparently assigning to an instance attribute, although, as we'll see in a moment, this assignment is actually invoking a method on the descriptor object. Allow us to explain the machinery we have created. Let's start with an instance of Planet. When we retrieve an attribute like this, with pluto. mass_kilograms, the Positive. dunder get function is called. The instance argument is set to Pluto, and the owner argument is set to the object which owns the descriptor. In this case, the class Planet. Similarly, our assignments to the descriptors in the Planet. dunder init function resolved to calls effectively equivalent to Positive. dunder set. Let's review graphically what we have here. We have a reference, Pluto, which is bound to an instance of Planet. The dunder class reference of the instance points to the Planet class object. The Planet class object contains four attributes, each of which references a distinct instance of the Positive descriptor object. The dunder class reference of each descriptor object refers to the Positive class. Notice that because the descriptor is owned by the Planet class rather than by the Pluto instance, we can't just store the value in the descriptor object. If we did that the value would be shared between all planet instances. Instead, we need to somehow associate the attribute value with the instance. At first, this seems easy. The dunder get call is handed a reference to the instance, Pluto in this case, so why not just store the value in Pluto's dunder dict? There's a problem though. Within the descriptor class, Positive, we have no way of knowing to which attribute name the descriptor is bound in the Planet class. We can distinguish between descriptor instances in dunder get using the self-argument, but in Python objects do not know which names have been bound to them. This means we have no way of correlating between descriptor instances and the descriptor names embedded in the Planet class. In other words, none of our descriptor objects know which quantity they represent. This, in turn, means we can't store the descriptor value in the dunder dict of Pluto because we wouldn't know what dictionary key to use. This apparent shortcoming of descriptors not knowing the name of the class attribute to which they are bound is also evident in the fact that our value validation error message in dunder set no longer mentions the attribute name, a clear regression in capabilities from what we had earlier. This is fixable, but the solution will have to wait until the next module in this course when we look at meta classes. So how to associate values with instances? Let's look at the solution pictorially first, then we'll reiterate with code. We use a special collection type from the Python standard library called WeakKeyDictionary. This works pretty much like a regular dictionary, except that it won't retain value objects, which are referred to only by the dictionary key references. We say the references are weak. A weak key dictionary owned by each descriptor instance is used to associate Planet instances with the values of the quantity represented by that descriptor, although the descriptor itself doesn't know which quantity is being represented. For example, the WeakKeyDictionary shown here associates Planet instances with mass_in_kilograms values. A separate WeakKeyDictionary associates Planet instances with radius_in_metres values. Because the dictionary keys are weak references, if our Planet instance is destroyed, let's pretend the earth is vaporized to make way for a hyperspace bypass, the corresponding entries in all the WeakKeyDictionaries are also removed. Now let's switch over to code to see how it's implemented in practice. A WeakKeyDictionary instance called _instance_data is created in the descriptor initializer, so as we've just seen, our Planet class indirectly aggregates four such dictionaries, one in each of the four descriptors. Within the dunder set method we associate the attribute value with the Planet instance by inserting a mapping from the instance as key to the attribute as value. As such, a single dictionary will contain all the radius_metres values for all planet instances. Another dictionary will contain all mass_kilograms values for all Planet instances, and so on. We're storing the instance attribute values completely outside the instances, but in such a way as we can reliably retrieve them in dunder get. Just to convince you that all of this works, we'll show it in action in the debugger. We'll stop the program in the initializer for Mars, and step into the descriptor dunder set function for technology radius_metres attribute. We can see that the _instance_data dictionary already contains the three radii for Mercury, Venus, and Earth.

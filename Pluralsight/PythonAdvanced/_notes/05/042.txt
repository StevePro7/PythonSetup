Allocation with __new__()
So let's figure out the signature of dunder new. We'll implement the most basic override of dunder new, which simply delegates to the base class implementation, although we'll add a few print statements, so we can easily inspect the arguments and return value. Notice that dunder new appears to be implicitly a class method. It accepts cls as its first argument rather than self. In fact, dunder new is especially cased static method that happens to take the type of the class as its first argument, but the distinction isn't important here. The cls argument is the class of the new object, which will be allocated. In our case, that will be ChessCoordinate, but in the presence of inheritance it isn't necessarily the case that the cls argument will be set to the class in closing the dunder new definition. In general, dunder new accepts in addition whatever parameters have been passed to the constructor. In this case, we've soaked up any such arguments using *args and ** keyword args, although we could have used specific argument names here, just as we have with dunder init. We'll print these additional argument values to the console. Remember that the purpose of dunder new is to allocate a new object. There's no special command for that in Python. All object allocation must be done by the dunder new implementation on the ultimate base class object. Here, rather than call the object. dunder new implementation directly, we'll call it via super. Should our immediate base class change in future this is more maintainable. The return value from the call to object. dunder new is the new instance of ChessCoordinate. We'll print its id. Remember, we can't expect repr to work yet, and then return. It is this returned object that is then passed as the self-argument to dunder init. We have printed the id of self here in dunder init to demonstrate that this is indeed the case. We see that the id of obj in dunder new is equal to the id of self in dunder init, and also that the constructor arguments have been forwarded to dunder new as expected.

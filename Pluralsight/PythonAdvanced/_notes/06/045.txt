Metaclasses
Metaclasses
Hello. My name is Robert Smallshire. Welcome to the sixth module of the Advanced Python course. We've mentioned metaclasses several times. We owe you an explanation. In this module we'll look at the concept of the class of class of objects, metaclass for short, the default metaclass called type, specifying metaclasses in class definitions, defining metaclasses, including the special methods of metaclasses, some practical examples of metaclasses, which solve some problems we've discovered earlier in the course, and a look at how metaclasses interact with inheritance. To assist us on our journey to understand metaclasses we need a simple class. We'll use Widget, which will be empty. We'll instantiate some widgets and introspect their types using the type built-in function. We all know that in Python the type of an instance is its class, so what is the type of its class? The type of a class is type. We've covered this before in the introspection module of Python Beyond the Basics, but it bears repeating here. One potentially confusing aspect here is that we're using type as a function to determine the type of an object, but type is also being used as a value. It is the type of the class object. However, this duality isn't so unusual. We see exactly the same situation with, say, list, where it is used as both a constructor and the value. Here we use the list constructor to construct a list A, and the type of a is also list. Given that the type of the Widget class is type, we can say that the metaclass of a widget is type. In general, the type of any class object in Python is its metaclass, and the default metaclass is type. Going even further, we can discover that the type of type is type. We can get the same results by drilling down through the special attribute, dunder class. Here's w. dunder class, w. dunder class dunder class, and w. dunder class dunder class dunder class, which is the base of the recursion. To understand where metaclasses fit into Python we must consider how class objects are created. When we define a class in a Python source file like this, with class Widget, this is actually shorthand for class Widget with the object base class and the type metaclass. In the same way that the base class is implicitly object, the metaclass is implicitly type.

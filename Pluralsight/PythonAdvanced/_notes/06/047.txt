Metaclass Keyword Arguments
Now let's look at a little known feature of Python which allows us to pass additional arguments to the metaclass. Earlier we skipped over the fact that dunder prepare, dunder new, and dunder init can all support a kwargs parameter to accept arbitrary keyword arguments. These can be supplied in the parameter list when defining a class, and any key with arguments provided over and above the named metaclass argument will be forwarded to these three special methods. Here's an example where we've passed a tension keyword argument with a value of 496 in the parameter list of our Reticulator class definition, which uses TracingMeta as its metaclass. As you can see, the arguments are dutifully forwarded to the metaclass methods, and the argument value could have been used to configure the class object. This allows the class statement to be used as a kind of class factory. Here's an interesting example, which uses keyword args. The dunder new method of the entries meta metaclass expects kwargs to contain a num_entries key, which maps to an integer value. This is used to populate the namespace with named entries using the letters of the alphabet. At first sight it looks like we only need to override dunder new to achieve our aims. Let's try to use it. We'll import EntriesMeta from entries, and then define a new class, AtoZ, with EntriesMeta as its metaclass, and passing the custom argument, num_entries, as 26 to get the 26 letters of the English alphabet. The trace output shows that num_entries 26 is successfully passed to dunder new, but later we get an error from dunder init. The problem we've set up deliberately here is that both dunder new and dunder init must accept any additional keyword arguments. They must have the same signature. We need a do nothing dunder init to keep Python happy. Here it is. With this important change in place everything works as intended. We import EntriesMeta, define AtoZ with EntriesMeta and num_entries 26. We see the num_entries item arriving keyword args, and we can see the namespace object populated with all the additional entries. Of course, we can just use a regular argument, as well as or instead of double star keyword args. Let's convert num_entries into a proper argument, in addition to double star keyword args. This makes the code much easier to understand, and still works exactly as before.

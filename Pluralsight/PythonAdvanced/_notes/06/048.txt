Metaclass Method Visibility
Now let's look at metaclass methods and their visibility. We've covered three important special methods for metaclasses; dunder prepare, dunder new, and dunder init, but what happens if we include other methods in the metaclass? Let's see by adding a method called metamethod to the TracingMeta metaclass we were experimenting with earlier. It accepts a single argument, cls, which remember, means it is an instance method of the metaclass. Within it we simply print its argument. Let's create the class widget again with its TracingMeta metaclass. As we complete our Widget class definition the metaclasses are invoked. It turns out that instance methods of the metaclass can be accessed similarly to class methods of the Widget class, and will have the regular class passed to them as the first and implicit argument. Here we call metamethod directly on the Widget class. However, unlike regular class methods we create with the class method decorator, we cannot access so called metamethods via the Widget instance. Metamethods are rarely used in practice, although one metamethod in particular has an interesting use, dunder call, which we'll look at shortly. Class method definitions in the regular class and its base classes will take precedence over looking up a method in its metaclass. Regular methods of the metaclass accept cls as their first argument. This makes sense because cls, the class, is the instance of the metaclass. It is analogous to self. On the other hand, class methods of the metaclass accept mcs as their first argument, the metaclass, analogous to the cls argument of a class method in a regular class.

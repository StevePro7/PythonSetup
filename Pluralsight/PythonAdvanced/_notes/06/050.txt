A Practical Metaclass Example
Python metaclasses can seem very, well, meta, so it's time for a session on metaclasses, which solve some actual problems you've probably encountered. At some point you've probably run into the issue that duplicate class attribute names aren't flagged by Python as errors. Here we have a class, Dodgy, which contains two definitions for method. In fact, the second definition takes precedence because it overwrites the first entry in the namespace dictionary as the class definition is processed. Let's write a metaclass which detects and prevents this unfortunate situation occurring. To do this, rather than using a regular dictionary as the namespace object used during class construction, we need a dictionary which raises an error when we try to assign to an existing key. Here is such a dictionary, OneShotDict, which is implemented by specializing the built-in dict type and overriding the dunder init and dunder set item methods. Note that the built-in dict has a quite sophisticated initializer, which accepts many forms of arguments, but something much simpler is sufficient in our case. After calling the super class dunder init the dunder init implementation loops over any entries which have been passed, inserting each key and value pair in turn by call to dunder setitem. In dunder setitem we check whether the key is already in the dictionary, and if it is we raise a value error. Before we use the OneShotDict in a metaclass let's just check that it's working as expected. We'll create an instance of OneShotDict called d, insert the value 65 against the key A, insert the value 66 against the key B, and then try to insert the value 32 against the key A. As hoped, the value error is triggered. Now we can design a very simple metaclass, which uses OneShotDict for the namespace object called ProhibitDuplicatesMeta. All we need to do is override the dunder prepare class method, returning an instance of our specialized dictionary. Now if we try to define a class with duplicate methods using this metaclass we get an error. The main shortcoming here is that the error message isn't hugely informative. Unfortunately, we don't have access to the part of the runtime machine, which reads our class definition and populates the dictionary, so we can't intercept the ValueError and emit a more useful error instead. The best we can do, rather than using a general purpose collection, like OneShotDict, is simply to create a functional equivalent called something like OneShotClassNamespace with a more specific error message. This has the benefit that we can pass in additional diagnostic information, such as the name of the class currently being defined into the namespace object on construction, which helps us produce a more useful message. We adjust its initializer to accept a positional name argument, which we store as an instance attribute, _name. In the guard clause of dunder set item we change the exception type from value error to type error, and edit the error message to make it both more germane and more informative. Lastly, we need to remember to forward the class name, which is past to dunder prepare, to the OneShotClassNamespace constructor. When we try to execute the module containing the class with the duplicate method definition we get a much more useful error message, cannot reassign existing class attribute 'method' of 'Dodgy'. Much better.

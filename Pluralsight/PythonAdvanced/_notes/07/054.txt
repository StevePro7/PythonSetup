Class Decorators
Class Decorators
Hello. My name is Robert Smallshire. Welcome to the seventh module of the Advanced Python course. There's no doubt that metaclasses can be difficult to understand and reason about. Fortunately, Python supports an alternative, which is sufficient for many cases where we want to customize classes at the point they are defined. This alternative is the class decorator. It's worth bearing in mind that anything that can be achieved with a class decorator can also be achieved with a metaclass, although the reverse is not true. In other words, class decorators are less powerful than metaclasses, although they are much easier to understand, so should be preferred whenever the desired effect can be achieved with either a metaclass or a class decorator. Class decorators work in much the same way as function decorators. They apply a transformation to a class after the class definition body has been processed, but before the definition is bound to the name of the class. Let's start with a very simple temperature class, which is decorated with a function, my_class_decorator. Set aside for the moment that these getter and setter methods are hardly the most Pythonic solution, they'll serve our purpose for the time being. To understand how class decorators work, my class decorator is a very simple function, which simply iterates over and prints the attributes of the class object. The class decorator must accept the class object as its only argument by a convention called cls, and must return the modified class object or an alternative class object, which will be bound to the class name given in the definition, in this case, Temperature. When we import our module into a REPL session we can see that the decorator is executed when the temperature class is first defined, which is when the module is first imported. The class attributes discovered by our decorator are dunder module, our get_kelvin and set_kelvin methods, dunder init, dunder weakref, and dunder dict. It's important for our Temperature class to maintain an important invariant of the universe in which we live that temperatures cannot be lower than absolute 0, which is 0 Kelvin. Rather than require that every method of our class individually honors this class invariant, we'll use a class decorator to wrap every method in an invariant checking proxy.

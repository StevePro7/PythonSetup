Detecting and Wrapping Properties
Recall that the property decorator produces a descriptor, which wraps the getter and setter methods, but because descriptors aren't callable functions they aren't being detected and wrapped by our invariant checking function decorator. To fix this we need to beef up our machinery to detect and appropriately proxy these descriptors. If we take a peek at vars(Temperature) we can see that Fahrenheit and Celsius correspond to property objects. Ideally, we detect any value in this mapping, which is a descriptor, which is any object supporting any of the dunder get, dunder set, or dunder delete methods. Unfortunately for us, in this case, descriptors are also used for all the functions and methods for reasons we won't even get into in this advanced course, so they too would be detected. Instead, we'll go for the simpler approach of looking for instances of property, how updated class decorator factory function looks like this. After we have detected the method names by looking for callable attributes, we detect the property names by looking for attributes where the value is an instance of property. We'll insert a new section into the body of the class decorator itself to search for and wrap any class attributes which are properties. This delegates to a new function called wrap_property_with_invariant_checking_proxy. This function retrieves the property from the class, and passes it and the predicate function, to the constructor of a new class, InvariantCheckingPropertyProxy. We use setattr to replace the property with the proxy. The InvariantCheckingPropertyProxy is itself a descriptor, implementing dunder get, dunder set, and dunder delete. The initializer simply stores references to the referent property and the predicate function. The implementations of dunder get, dunder set, and dunder delete forward to the underlying referent property, and then check that the class invariant of the instance remains unviolated. A quick test at the REPL shows that everything is working as designed. We'll create a Temperature of 42 Kelvin, try to use the Celsius setter to set a temperature of -300 Celsius, which results in a runtime error, showing that our InvariantCheckingPropertyProxy is working. A temperature of 100 Fahrenheit is admissible, and we can convert that to Celsius. Everything seems to be working fine.

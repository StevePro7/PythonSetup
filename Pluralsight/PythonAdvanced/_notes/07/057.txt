Chaining Class Decorators
For a final demonstration we'll show that we can chain class decorators just as we can with function decorators. We've added a second invariant to be maintained to ensure that the temperature is below the hypothetical value, absolute hot. You can read more about this on Wikipedia if you're interested in the physics. At the REPL we can see that both constraints are enforced when we call instance methods, such as set to Kelvin. We start with a temperature of 37. 5 Kelvin, we're prevented from setting a negative Kelvin value, and if we try to set a Kelvin value larger than absolute hot, 1 * 10 to the 33, the attempted invariant violation is detected. Our class decorator has no problem decorating the already decorated methods on its second implication. The proxy and properties are another story though. Although the lower bound check works as before on the properties, when we try to set the temperature of -300 the violation is detected. Attempts to violate on the upper bound are not detected, so setting a temperature of 1 * 10 to the 34 Celsius doesn't fail as it should. The problem here is that our class decorator is detecting specifically property instances with the is instance check; however, our invariant checking and property proxy is not a property, so our proxy which enforces the not_below_absolute_0 invariant is applied to the genuine property, although the below_absolute_hot proxy is not applied to the invariant checking and property proxy. For a solution to this problem we'll use Python's abstract base class mechanism, a topic we'll explore in the next module of this course.

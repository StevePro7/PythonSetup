Combining Subclass Detection and Registration
You need to take care when combining virtual subclass registration with the dunder subclasshook technique because the results of dunder subclasshook takes precedence over the subclass registry. Returning true or false from dunder subclasshook is taken as a definite answer. If you also want registration to be accounted for you should return NotImplemented to indicate not sure. To see this in action let's add a lightsaber, which has no sharpen method, to our example. This class won't satisfy the dunder subclasshook test we defined in Sword, but we still want it identified as a virtual subclass of sort, so we've registered it using the decorator form of Sword. register. Even though we've registered LightSaber with Sword the subclass test returns false. To fix this we need to ensure that dunder subclasshook never returns false because doing so causes the dunder subclass check implementation in ABCMeta to skip the check for registered subclasses. Instead, in the case of a negative result we should return NotImplemented. With this change in place we should exploit shortcut evaluation of the logical operators. Subclass detection now works as expected for implicitly detected subclasses, explicitly registered subclasses, and non-subclasses. Do bear in mind, though, that this somewhat contrived example is designed to demonstrate that you should take care with subclass registration. How useful is our virtual base class, Sword, now? The answer is not very because being an instance of Sword is no longer a useful predicate for the object in question, as we can't guarantee the presence of the sharpen method, which was, if you'll excuse the pun, the whole point of the sword.

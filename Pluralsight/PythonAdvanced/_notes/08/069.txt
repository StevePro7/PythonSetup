Combining Method Decorators
What if you need to combine abstractmethod with other decorators? The abstractmethod decorator can be combined with the static method, class method, and property decorators, although care must be taken that the abstract method is the innermost decorator. For properties you can independently mark the getters and setters as abstract. Recall that properties are implemented using descriptors. When implementing your own descriptors you'll need to do a little extra work to ensure your descriptor plays nicely with abstractmethod. Let's look now at how to propagate abstractness through descriptors. Any descriptors which are implemented in terms of abstract methods should identify themselves as abstract by exposing a dunder isabstractmethod attribute, which should evaluate to true. Here in MyDataDescriptor, which inherits from the ABC base class, we've declared dunder get, dunder set, and dunder delete as abstract methods. The dunder isabstractmethod attribute can either be implemented as a class attribute of the descriptor class or can itself be implemented as a property, as we have done here. Implementing as a property is useful in cases where abstractness needs to be determined at runtime, as we'll see in an example shortly. First, though, let's see this in action with a very simple example. We will define a class called AbstractBaseClass, which inherits from ABC. Within this class we'll define two properties called abstract_property and concrete_property using the appropriate combinations of decorators. By querying the descriptor objects created by the property decorators we can inspect the dunder isabstractmethod attribute of the two properties and see that they have been marked as abstract and none abstract or concrete, as necessary. This happens because the dunder isabstract method flag is inspected by the ABCMeta implementation when the metaclass creates the actual class object, which hosts the property descriptor. So much for the theory, let's see this in practice.

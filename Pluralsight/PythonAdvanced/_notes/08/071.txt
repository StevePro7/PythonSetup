Summary
In this module we've explained Python system of abstract base classes, which is somewhat more flexible than similar concepts in other languages. In particular, we covered how the behavior of the built-in issubclass and isinstance functions can be specialized for a base class by defining the dunder subclasscheck and dunder instancecheck methods on the metaclass of that base class. Specialized subclass checks allow us to centralize the definition of what it means to be a subclass by gathering look before you leap protocol checks into one place. Any class which implements the required protocol will become at least a virtual subclass of a virtual base class. The standard library ABC module contains tools for assisting in the definition of abstract base classes. Most important amongst these tools is the ABC metamethod class, which can be used as the metaclass for abstract base classes. Slightly more conveniently, you can simply inherit from the ABC class, which has ABCMeta as its metaclass. ABCMeta provides default implementations of both dunder subclasscheck and dunder instancecheck, which support two means of identifying subclasses, a special dunder subclasshook class method on abstract base classes or a registration method. Dunder subclasshook accepts a candidate subclass as it's only argument, and should return true or not implemented. False should only be returned if it is designed to disable subclass registration. Passing any class, even a built-in class to the register metamethod of an abstract base class will register the argument as a virtual subclass of the base class. An abstractmethod decorator can be used to prevent instantiation of abstract classes, and require methods to be marked as such to be overridden in real, although not virtual, subclasses. The abstractmethod decorator can be combined with other decorators, such as staticmethod, classmethod, and property, but abstractmethod should always be the innermost decorator. Descriptors should propagate abstractness from underlying methods by exposing the dunder isabstractmethod attribute. Python is a large and complicated language with many moving parts. We find it remarkable that much of this complexity is so well hidden for the vast majority of the time in Python. We hope in this course we've given you deeper insight into some important mechanisms in Python which, while a bit trickier to understand, can deliver great expressive power. You've now reached the end of this course in Advanced Python, and now is the time to take what you've learned and apply these powerful techniques in your work and play with Python. If you'd like written material to go along with this course you should check out our Python Craftsman book series. The books correspond to our Pluralsight courses, which cover the core Python language. The first book in the Craftsman series, The Python Apprentice, corresponds to our Python Fundamentals Pluralsight course. The second book, The Python Journeyman, corresponds to our Python Beyond the Basics Pluralsight course. The trilogy is completed by the The Python Master, which corresponds to this Advanced Python course. Pluralsight viewers can follow the URLs shown below each book to get them at a deep discount. If you'd like to dig further into some advanced uses of Python you might care to swing by our Sixty North Blog, Good with Computers, where we cover some very advanced topics, such as integrating Python with C++ code and implementing a sophisticated functional programming technique called transducers in Python. We'll doubtless be back with more content for the ever-growing Python language and library. Please remember, though, that the most important characteristic of Python is that, above all else, it's great fun to write Python software, so enjoy yourselves.

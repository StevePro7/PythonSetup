https://chatgpt.com
23-May-2024

python flask api kubernetes example mac
brew install python
pip install Flask
brew install minikube
brew install kubectl

pip install Flask SQLAlchemy Alembic psycopg2-binary


app.py
from flask import Flask, jsonify
from flask_sqlalchemy import SQLAlchemy
import os

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = os.getenv('DATABASE_URL')
db = SQLAlchemy(app)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)

    def __repr__(self):
        return f'<User {self.username}>'

@app.route('/')
def hello_world():
    users = User.query.all()
    return jsonify(users=[user.username for user in users])

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)



requirements.txt
Flask==2.0.3
SQLAlchemy==1.4.31
psycopg2-binary==2.9.3


Alembic
alembic init alembic

alembic.ini
# Replace the line starting with sqlalchemy.url with the following
sqlalchemy.url = postgresql+psycopg2://user:password@localhost/dbname

Edit alembic/env.py to use the Flask app's database URL:
from alembic import context
from sqlalchemy import engine_from_config, pool
from logging.config import fileConfig
import os

# this is the Alembic Config object, which provides
# access to the values within the .ini file in use.
config = context.config

# Interpret the config file for Python logging.
# This line sets up loggers basically.
fileConfig(config.config_file_name)

# add your model's MetaData object here
# for 'autogenerate' support
# from myapp import mymodel
# target_metadata = mymodel.Base.metadata
from app import db
config.set_main_option('sqlalchemy.url', os.getenv('DATABASE_URL'))
target_metadata = db.metadata

# other values from the config, defined by the needs of env.py,
# can be acquired:
# my_important_option = config.get_main_option("my_important_option")
# ... etc.


def run_migrations_offline():
    """Run migrations in 'offline' mode.
    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well. By skipping the Engine creation
    we don't even need a DBAPI to be available.
    Calls to context.execute() here emit the given string to the
    script output.
    """
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url, target_metadata=target_metadata, literal_binds=True
    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online():
    """Run migrations in 'online' mode.
    In this scenario we need to create an Engine
    and associate a connection with the context.
    """
    connectable = engine_from_config(
        config.get_section(config.config_ini_section),
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )

    with connectable.connect() as connection:
        context.configure(connection=connection, target_metadata=target_metadata)

        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()


Init migration
alembic revision --autogenerate -m "Initial migration"
alembic upgrade head


Dockerfile
# Use an official Python runtime as a parent image
FROM python:3.9-slim

# Set the working directory
WORKDIR /app

# Copy the current directory contents into the container at /app
COPY . /app

# Install any needed packages specified in requirements.txt
RUN pip install --no-cache-dir -r requirements.txt

# Set environment variables
ENV DATABASE_URL=postgresql+psycopg2://user:password@db/dbname

# Make port 5000 available to the world outside this container
EXPOSE 5000

# Run app.py when the container launches
CMD ["python", "app.py"]


Step 4: Docker Compose for Local Development
version: '3'
services:
  db:
    image: postgres:13
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: dbname
    ports:
      - "5432:5432"
  web:
    build: .
    command: ["sh", "-c", "alembic upgrade head && python app.py"]
    environment:
      DATABASE_URL: postgresql+psycopg2://user:password@db/dbname
    ports:
      - "5000:5000"
    depends_on:
      - db


Kind
kind create cluster --name flask-cluster

kind load docker-image flask-api --name flask-cluster


//docker build -t flask-api .
//docker run -p 5000:5000 flask-api

//kind create cluster --name flask-cluster


deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-api-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: flask-api
  template:
    metadata:
      labels:
        app: flask-api
    spec:
      containers:
      - name: flask-api
        image: flask-api:latest
        ports:
        - containerPort: 5000
        env:
        - name: DATABASE_URL
          value: postgresql+psycopg2://user:password@postgres/dbname
---
apiVersion: v1
kind: Service
metadata:
  name: flask-api-service
spec:
  selector:
    app: flask-api
  ports:
    - protocol: TCP
      port: 80
      targetPort: 5000
  type: NodePort


postgres.yaml
apiVersion: v1
kind: Service
metadata:
  name: postgres
spec:
  ports:
  - port: 5432
  selector:
    app: postgres
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  selector:
    matchLabels:
      app: postgres
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - image: postgres:13
        name: postgres
        env:
        - name: POSTGRES_USER
          value: "user"
        - name: POSTGRES_PASSWORD
          value: "password"
        - name: POSTGRES_DB
          value: "dbname"
        ports:
        - containerPort: 5432


kubectl apply -f k8s/postgres.yaml
kubectl apply -f k8s/deployment.yaml


kubectl get service flask-api-service

NAME                TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE
flask-api-service   NodePort   10.96.125.239   <none>        80:XXXX/TCP    1m


kubectl port-forward service/flask-api-service 8080:80
Then access the API at http://localhost:8080

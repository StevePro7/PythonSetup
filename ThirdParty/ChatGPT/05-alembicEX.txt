https://chatgpt.com
23-May-2024

mkdir alembic_example
cd alembic_example

python3 -m venv venv
source venv/bin/activate
pip install sqlalchemy alembic psycopg2-binary


alembic_example/
├── alembic/
├── alembic.ini
├── app/
│   ├── __init__.py
│   ├── models.py
│   ├── main.py
├── requirements.txt


alembic init alembic



alembic.ini
# A generic, single database configuration.

[alembic]
# path to migration scripts
script_location = alembic

sqlalchemy.url = postgresql://user:password@localhost/alembic_example

# Other configuration options...



alembic/env.py:
from __future__ import with_statement
from alembic import context
from sqlalchemy import engine_from_config, pool
from logging.config import fileConfig
import os
import sys

# this is the Alembic Config object, which provides
# access to the values within the .ini file in use.
config = context.config

# Interpret the config file for Python logging.
# This line sets up loggers basically.
fileConfig(config.config_file_name)

# add your model's MetaData object here
# for 'autogenerate' support
# from myapp import mymodel
# target_metadata = mymodel.Base.metadata
sys.path.insert(0, os.path.realpath(os.path.join(os.path.dirname(__file__), '..')))
from app.models import Base  # Import your base model

target_metadata = Base.metadata

# other values from the config, defined by the needs of env.py,
# can be acquired:
# my_important_option = config.get_main_option("my_important_option")
# ... etc.


def run_migrations_offline():
    """Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well. By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.

    """
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url, target_metadata=target_metadata, literal_binds=True
    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online():
    """Run migrations in 'online' mode.

    In this scenario we need to create an Engine
    and associate a connection with the context.

    """
    connectable = engine_from_config(
        config.get_section(config.config_ini_section),
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )

    with connectable.connect() as connection:
        context.configure(connection=connection, target_metadata=target_metadata)

        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()


app/models.py:
from sqlalchemy import Column, Integer, String, create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

Base = declarative_base()

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    username = Column(String, unique=True, nullable=False)

DATABASE_URL = "postgresql://user:password@localhost/alembic_example"

engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base.metadata.create_all(bind=engine)


alembic revision --autogenerate -m "Initial migration"

alembic upgrade head


app/main.py:
from app.models import SessionLocal, User

def add_user(username):
    db = SessionLocal()
    new_user = User(username=username)
    db.add(new_user)
    db.commit()
    db.refresh(new_user)
    db.close()
    return new_user

if __name__ == "__main__":
    user = add_user("testuser")
    print(f"Added user: {user.username}")


python app/main.py
